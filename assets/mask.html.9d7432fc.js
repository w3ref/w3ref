import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{o as d,c as l,a as e,g as s,b as a}from"./app.674943b1.js";const r={},o=s('<h1 id="mask-plugin" tabindex="-1"><a class="header-anchor" href="#mask-plugin" aria-hidden="true">#</a> Mask Plugin</h1><p>Alpine&#39;s Mask plugin allows you to automatically format a text input field as a user types.</p><p>This is useful for many different types of inputs: phone numbers, credit cards, dollar amounts, account numbers, dates, etc.</p><p><a name="installation"></a></p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2>',5),u={"x-data":"{ expanded: false }"},c=e("div",{class:"relative"},[e("div",{"x-show":"! expanded",class:"absolute inset-0 flex justify-start items-end bg-gradient-to-t from-white to-[#ffffff66]"}),e("div",{"x-show":"expanded","x-collapse.min.80px":"",class:"markdown"},[e("p",null,[a("You can use this plugin by either including it from a "),e("code",null,"<script>"),a(" tag or installing it via NPM:")]),e("h3",{id:"via-cdn",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#via-cdn","aria-hidden":"true"},"#"),a(" Via CDN")]),e("p",null,[a("You can include the CDN build of this plugin as a "),e("code",null,"<script>"),a(" tag, just make sure to include it BEFORE Alpine's core JS file.")]),e("div",{class:"language-alpine ext-alpine line-numbers-mode"},[e("pre",{class:"language-alpine"},[e("code",null,`<!-- Alpine Plugins -->
<script defer src="https://unpkg.com/@alpinejs/mask@3.x.x/dist/cdn.min.js"><\/script>

<!-- Alpine Core -->
<script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"><\/script>
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])]),e("h3",{id:"via-npm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#via-npm","aria-hidden":"true"},"#"),a(" Via NPM")]),e("p",null,"You can install Mask from NPM for use inside your bundle like so:"),e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"npm"),a(),e("span",{class:"token function"},"install"),a(` @alpinejs/mask
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,"Then initialize it from your bundle:"),e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"import"),a(" Alpine "),e("span",{class:"token keyword"},"from"),a(),e("span",{class:"token string"},"'alpinejs'"),a(`
`),e("span",{class:"token keyword"},"import"),a(" mask "),e("span",{class:"token keyword"},"from"),a(),e("span",{class:"token string"},"'@alpinejs/mask'"),a(`

Alpine`),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"plugin"),e("span",{class:"token punctuation"},"("),a("mask"),e("span",{class:"token punctuation"},")"),a(`

`),e("span",{class:"token operator"},"..."),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])])])],-1),p=["aria-expanded"],m=e("span",{"x-text":"expanded ? 'Hide' : 'Show more'"},"Show",-1),v=a(),h=e("span",{"x-text":"expanded ? '\u2191' : '\u2193'"},"\u2193",-1),b=[m,v,h],g=s(`<p><a name="x-mask"></a></p><h2 id="x-mask" tabindex="-1"><a class="header-anchor" href="#x-mask" aria-hidden="true">#</a> x-mask</h2><p>The primary API for using this plugin is the <code>x-mask</code> directive.</p><p>Let&#39;s start by looking at the following simple example of a date field:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;input x-mask=&quot;99/99/9999&quot; placeholder=&quot;MM/DD/YYYY&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div class=&quot;demo&quot;&gt;
    &lt;input x-data x-mask=&quot;99/99/9999&quot; placeholder=&quot;MM/DD/YYYY&quot;&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how the text you type into the input field must adhere to the format provided by <code>x-mask</code>. In addition to enforcing numeric characters, the forward slashes <code>/</code> are also automatically added if a user doesn&#39;t type them first.</p><p>The following wildcard characters are supported in masks:</p><table><thead><tr><th>Wildcard</th><th>Description</th></tr></thead><tbody><tr><td><code>*</code></td><td>Any character</td></tr><tr><td><code>a</code></td><td>Only alpha characters (a-z, A-Z)</td></tr><tr><td><code>9</code></td><td>Only numeric characters (0-9)</td></tr></tbody></table><p><a name="mask-functions"></a></p><h2 id="dynamic-masks" tabindex="-1"><a class="header-anchor" href="#dynamic-masks" aria-hidden="true">#</a> Dynamic Masks</h2><p>Sometimes simple mask literals (i.e. <code>(999) 999-9999</code>) are not sufficient. In these cases, <code>x-mask:dynamic</code> allows you to dynamically generate masks on the fly based on user input.</p><p>Here&#39;s an example of a credit card input that needs to change it&#39;s mask based on if the number starts with the numbers &quot;34&quot; or &quot;37&quot; (which means it&#39;s an Amex card and therefore has a different format).</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;input x-mask:dynamic=&quot;
    $input.startsWith(&#39;34&#39;) || $input.startsWith(&#39;37&#39;)
        ? &#39;9999 999999 99999&#39; : &#39;9999 9999 9999 9999&#39;
&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see in the above example, every time a user types in the input, that value is passed to the expression as <code>$input</code>. Based on the <code>$input</code>, a different mask is utilized in the field.</p><p>Try it for yourself by typing a number that starts with &quot;34&quot; and one that doesn&#39;t.</p><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div class=&quot;demo&quot;&gt;
    &lt;input x-data x-mask:dynamic=&quot;
        $input.startsWith(&#39;34&#39;) || $input.startsWith(&#39;37&#39;)
            ? &#39;9999 999999 99999&#39; : &#39;9999 9999 9999 9999&#39;
    &quot;&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>x-mask:dynamic</code> also accepts a function as a result of the expression and will automatically pass it the <code>$input</code> as the the first paramter. For example:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;input x-mask:dynamic=&quot;creditCardMask&quot;&gt;

&lt;script&gt;
function creditCardMask(input) {
    return input.startsWith(&#39;34&#39;) || input.startsWith(&#39;37&#39;)
        ? &#39;9999 999999 99999&#39;
        : &#39;9999 9999 9999 9999&#39;
}
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="money-inputs"></a></p><h2 id="money-inputs" tabindex="-1"><a class="header-anchor" href="#money-inputs" aria-hidden="true">#</a> Money Inputs</h2><p>Because writing your own dynamic mask expression for money inputs is fairly complex, Alpine offers a prebuilt one and makes it available as <code>$money()</code>.</p><p>Here is a fully functioning money input mask:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;input x-mask:dynamic=&quot;$money($input)&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div class=&quot;demo&quot; x-data&gt;
    &lt;input type=&quot;text&quot; x-mask:dynamic=&quot;$money($input)&quot; placeholder=&quot;0.00&quot;&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you wish to swap the periods for commas and vice versa (as is required in certain currencies), you can do so using the second optional parameter:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;input x-mask:dynamic=&quot;$money($input, &#39;,&#39;)&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div class=&quot;demo&quot; x-data&gt;
    &lt;input type=&quot;text&quot; x-mask:dynamic=&quot;$money($input, &#39;,&#39;)&quot;  placeholder=&quot;0,00&quot;&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function f(n,i){return d(),l("div",null,[o,e("div",u,[c,e("button",{"aria-expanded":n.expanded,onClick:i[0]||(i[0]=x=>n.expanded=!n.expanded),class:"text-cyan-600 font-medium underline"},b,8,p)]),g])}var q=t(r,[["render",f],["__file","mask.html.vue"]]);export{q as default};
