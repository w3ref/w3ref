import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as a,c as s,g as e}from"./app.674943b1.js";const t={},p=e(`<h1 id="alpine-data" tabindex="-1"><a class="header-anchor" href="#alpine-data" aria-hidden="true">#</a> Alpine.data</h1><p><code>Alpine.data(...)</code> provides a way to re-use <code>x-data</code> contexts within your application.</p><p>Here&#39;s a contrived <code>dropdown</code> component for example:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;dropdown&quot;&gt;
    &lt;button @click=&quot;toggle&quot;&gt;...&lt;/button&gt;

    &lt;div x-show=&quot;open&quot;&gt;...&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
    document.addEventListener(&#39;alpine:init&#39;, () =&gt; {
        Alpine.data(&#39;dropdown&#39;, () =&gt; ({
            open: false,

            toggle() {
                this.open = ! this.open
            }
        }))
    })
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see we&#39;ve extracted the properties and methods we would usually define directly inside <code>x-data</code> into a separate Alpine component object.</p><p><a name="registering-from-a-bundle"></a></p><h2 id="registering-from-a-bundle" tabindex="-1"><a class="header-anchor" href="#registering-from-a-bundle" aria-hidden="true">#</a> Registering from a bundle</h2><p>If you&#39;ve chosen to use a build step for your Alpine code, you should register your components in the following way:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Alpine <span class="token keyword">from</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">alpinejs</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">import</span> dropdown <span class="token keyword">from</span> <span class="token string">&#39;./dropdown.js&#39;</span>

Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> dropdown<span class="token punctuation">)</span>

Alpine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This assumes you have a file called <code>dropdown.js</code> with the following contents:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>open <span class="token operator">=</span> <span class="token operator">!</span> <span class="token keyword">this</span><span class="token punctuation">.</span>open
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="initial-parameters"></a></p><h2 id="initial-parameters" tabindex="-1"><a class="header-anchor" href="#initial-parameters" aria-hidden="true">#</a> Initial parameters</h2><p>In addition to referencing <code>Alpine.data</code> providers by their name plainly (like <code>x-data=&quot;dropdown&quot;</code>), you can also reference them as functions (<code>x-data=&quot;dropdown()&quot;</code>). By calling them as functions directly, you can pass in additional parameters to be used when creating the initial data object like so:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;dropdown(true)&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">initialOpenState <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> initialOpenState
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, you can re-use the <code>dropdown</code> object, but provide it with different parameters as you need to.</p><p><a name="init-functions"></a></p><h2 id="init-functions" tabindex="-1"><a class="header-anchor" href="#init-functions" aria-hidden="true">#</a> Init functions</h2><p>If your component contains an <code>init()</code> method, Alpine will automatically execute it before it renders the component. For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This code will be executed before Alpine</span>
        <span class="token comment">// initializes the rest of the component.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="using-magic-properties"></a></p><h2 id="using-magic-properties" tabindex="-1"><a class="header-anchor" href="#using-magic-properties" aria-hidden="true">#</a> Using magic properties</h2><p>If you want to access magic methods or properties from a component object, you can do so using the <code>this</code> context:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="encapsulating-directives-with-x-bind"></a></p><h2 id="encapsulating-directives-with-x-bind" tabindex="-1"><a class="header-anchor" href="#encapsulating-directives-with-x-bind" aria-hidden="true">#</a> Encapsulating directives with <code>x-bind</code></h2><p>If you wish to re-use more than just the data object of a component, you can encapsulate entire Alpine template directives using <code>x-bind</code>.</p><p>The following is an example of extracting the templating details of our previous dropdown component using <code>x-bind</code>:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;dropdown&quot;&gt;
    &lt;button x-bind=&quot;trigger&quot;&gt;&lt;/button&gt;

    &lt;div x-bind=&quot;dialogue&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token string">&#39;@click&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>open <span class="token operator">=</span> <span class="token operator">!</span> <span class="token keyword">this</span><span class="token punctuation">.</span>open
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token literal-property property">dialogue</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token string">&#39;x-show&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>open
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),i=[p];function o(c,l){return a(),s("div",null,i)}var r=n(t,[["render",o],["__file","alpine-data.html.vue"]]);export{r as default};
