import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{r as l,o as i,c as o,a as n,d as t,b as s,g as p}from"./app.674943b1.js";const c={},u=n("h1",{id:"morph-plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#morph-plugin","aria-hidden":"true"},"#"),s(" Morph Plugin")],-1),d=n("p",null,`Alpine's Morph plugin allows you to "morph" an element on the page into the provided HTML template, all while preserving any browser or Alpine state within the "morphed" element.`,-1),r=s("This is useful for updating HTML from a server request without loosing Alpine's on-page state. A utility like this is at the core of full-stack frameworks like "),v={href:"https://laravel-livewire.com/",target:"_blank",rel:"noopener noreferrer"},m=s("Laravel Livewire"),h=s(" and "),k={href:"https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript",target:"_blank",rel:"noopener noreferrer"},g=s("Phoenix LiveView"),b=s("."),q=p(`<p>The best way to understand its purpose is with the following interactive visualization. Give it a try!</p><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div x-data=&quot;{ slide: 1 }&quot; class=&quot;border rounded&quot;&gt;
    &lt;div&gt;
        &lt;img :src=&quot;&#39;/images/refs/web/frameworks/js/alpinejs/plugins/morphs/morph&#39;+slide+&#39;.png&#39;&quot;&gt;
    &lt;/div&gt;

    &lt;div class=&quot;flex w-full justify-between&quot; style=&quot;padding-bottom: 1rem&quot;&gt;
        &lt;div class=&quot;w-1/2 px-4&quot;&gt;
            &lt;button @click=&quot;slide = (slide === 1) ? 13 : slide - 1&quot; class=&quot;w-full bg-cyan-400 rounded-full text-center py-3 font-bold text-white&quot;&gt;Previous&lt;/button&gt;
        &lt;/div&gt;
        &lt;div class=&quot;w-1/2 px-4&quot;&gt;
            &lt;button @click=&quot;slide = (slide % 13) + 1&quot; class=&quot;w-full bg-cyan-400 rounded-full text-center py-3 font-bold text-white&quot;&gt;Next&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="installation"></a></p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>You can use this plugin by either including it from a <code>&lt;script&gt;</code> tag or installing it via NPM:</p><h3 id="via-cdn" tabindex="-1"><a class="header-anchor" href="#via-cdn" aria-hidden="true">#</a> Via CDN</h3><p>You can include the CDN build of this plugin as a <code>&lt;script&gt;</code> tag, just make sure to include it BEFORE Alpine&#39;s core JS file.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;!-- Alpine Plugins --&gt;
&lt;script defer src=&quot;https://unpkg.com/@alpinejs/morph@3.x.x/dist/cdn.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- Alpine Core --&gt;
&lt;script defer src=&quot;https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-npm" tabindex="-1"><a class="header-anchor" href="#via-npm" aria-hidden="true">#</a> Via NPM</h3><p>You can install Morph from NPM for use inside your bundle like so:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @alpinejs/morph
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then initialize it from your bundle:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Alpine <span class="token keyword">from</span> <span class="token string">&#39;alpinejs&#39;</span>
<span class="token keyword">import</span> morph <span class="token keyword">from</span> <span class="token string">&#39;@alpinejs/morph&#39;</span>

window<span class="token punctuation">.</span>Alpine <span class="token operator">=</span> Alpine
Alpine<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>morph<span class="token punctuation">)</span>

<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="alpine-morph"></a></p><h2 id="alpine-morph" tabindex="-1"><a class="header-anchor" href="#alpine-morph" aria-hidden="true">#</a> Alpine.morph()</h2><p>The <code>Alpine.morph(el, newHtml)</code> allows you to imperatively morph a dom node based on passed in HTML. It accepts the following parameters:</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>el</code></td><td>A DOM element on the page.</td></tr><tr><td><code>newHtml</code></td><td>A string of HTML to use as the template to morph the dom element into.</td></tr><tr><td><code>options</code> (optional)</td><td>An options object used mainly for <a href="#lifecycle-hooks">injecting lifecycle hooks</a>.</td></tr></tbody></table><p>Here&#39;s an example of using <code>Alpine.morph()</code> to update an Alpine component with new HTML: (In real apps, this new HTML would likely be coming from the server)</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ message: &#39;Change me, then press the button!&#39; }&quot;&gt;
    &lt;input type=&quot;text&quot; x-model=&quot;message&quot;&gt;
    &lt;span x-text=&quot;message&quot;&gt;&lt;/span&gt;
&lt;/div&gt;

&lt;button&gt;Run Morph&lt;/button&gt;

&lt;script&gt;
    document.querySelector(&#39;button&#39;).addEventListener(&#39;click&#39;, () =&gt; {
        let el = document.querySelector(&#39;div&#39;)

        Alpine.morph(el, \`
            &lt;div x-data=&quot;{ message: &#39;Change me, then press the button!&#39; }&quot;&gt;
                &lt;h2&gt;See how new elements have been added&lt;/h2&gt;

                &lt;input type=&quot;text&quot; x-model=&quot;message&quot;&gt;
                &lt;span x-text=&quot;message&quot;&gt;&lt;/span&gt;

                &lt;h2&gt;but the state of this component hasn&#39;t changed? Magical.&lt;/h2&gt;
            &lt;/div&gt;
        \`)
    })
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div class=&quot;demo&quot;&gt;
    &lt;div x-data=&quot;{ message: &#39;Change me, then press the button!&#39; }&quot; id=&quot;morph-demo-1&quot; class=&quot;space-y-2&quot;&gt;
        &lt;input type=&quot;text&quot; x-model=&quot;message&quot; class=&quot;w-full&quot;&gt;
        &lt;span x-text=&quot;message&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;

    &lt;button id=&quot;morph-button-1&quot; class=&quot;mt-4&quot;&gt;Run Morph&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
    document.querySelector(&#39;#morph-button-1&#39;).addEventListener(&#39;click&#39;, () =&gt; {
        let el = document.querySelector(&#39;#morph-demo-1&#39;)

        Alpine.morph(el, \`
            &lt;div x-data=&quot;{ message: &#39;Change me, then press the button!&#39; }&quot; id=&quot;morph-demo-1&quot; class=&quot;space-y-2&quot;&gt;
                &lt;h4&gt;See how new elements have been added&lt;/h4&gt;
                &lt;input type=&quot;text&quot; x-model=&quot;message&quot; class=&quot;w-full&quot;&gt;
                &lt;span x-text=&quot;message&quot;&gt;&lt;/span&gt;
                &lt;h4&gt;but the state of this component hasn&#39;t changed? Magical.&lt;/h4&gt;
            &lt;/div&gt;
        \`)
    })
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="lifecycle-hooks"></a></p><h3 id="lifecycle-hooks" tabindex="-1"><a class="header-anchor" href="#lifecycle-hooks" aria-hidden="true">#</a> Lifecycle Hooks</h3><p>The &quot;Morph&quot; plugin works by comparing two DOM trees, the live element, and the passed in HTML.</p><p>Morph walks both trees simultaneously and compares each node and its children. If it finds differences, it &quot;patches&quot; (changes) the current DOM tree to match the passed in HTML&#39;s tree.</p><p>While the default algorithm is very capable, there are cases where you may want to hook into its lifecycle and observe or change its behavior as it&#39;s happening.</p><p>Before we jump into the available Lifecycle hooks themselves, let&#39;s first list out all the potential parameters they receive and explain what each one is:</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>el</code></td><td>This is always the actual, current, DOM element on the page that will be &quot;patched&quot; (changed by Morph).</td></tr><tr><td><code>toEl</code></td><td>This is a &quot;template element&quot;. It&#39;s a temporary element representing what the live <code>el</code> will be patched to. It will never actually live on the page and should only be used for reference purposes.</td></tr><tr><td><code>childrenOnly()</code></td><td>This is a function that can be called inside the hook to tell Morph to skip the current element and only &quot;patch&quot; its children.</td></tr><tr><td><code>skip()</code></td><td>A function that when called within the hook will &quot;skip&quot; comparing/patching itself and the children of the current element.</td></tr></tbody></table><p>Here are the available lifecycle hooks (passed in as the third parameter to <code>Alpine.morph(..., options)</code>):</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>updating(el, toEl, childrenOnly, skip)</code></td><td>Called before patching the <code>el</code> with the comparison <code>toEl</code>.</td></tr><tr><td><code>updated(el, toEl)</code></td><td>Called after Morph has patched <code>el</code>.</td></tr><tr><td><code>removing(el, skip)</code></td><td>Called before Morph removes an element from the live DOM.</td></tr><tr><td><code>removed(el)</code></td><td>Called after Morph has removed an element from the live DOM.</td></tr><tr><td><code>adding(el, skip)</code></td><td>Called before adding a new element.</td></tr><tr><td><code>added(el)</code></td><td>Called after adding a new element to the live DOM tree.</td></tr><tr><td><code>key(el)</code></td><td>A re-usable function to determine how Morph &quot;keys&quot; elements in the tree before comparing/patching. <a href="#keys">More on that here</a></td></tr><tr><td><code>lookahead</code></td><td>A boolean value telling Morph to enable an extra feature in its algorithm that &quot;looks ahead&quot; to make sure a DOM element that&#39;s about to be removed should instead just be &quot;moved&quot; to a later sibling.</td></tr></tbody></table><p>Here is code of all these lifecycle hooks for a more concrete reference:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">morph</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> newHtml<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">updating</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> toEl<span class="token punctuation">,</span> childrenOnly<span class="token punctuation">,</span> skip</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> toEl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">removing</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> skip</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">removed</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">adding</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> skip</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">added</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">key</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// By default Alpine uses the \`key=&quot;&quot;\` HTML attribute.</span>
        <span class="token keyword">return</span> el<span class="token punctuation">.</span>id
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token literal-property property">lookahead</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Default: false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="keys"></a></p><h3 id="keys" tabindex="-1"><a class="header-anchor" href="#keys" aria-hidden="true">#</a> Keys</h3><p>Dom-diffing utilities like Morph try their best to accurately &quot;morph&quot; the original DOM into the new HTML. However, there are cases where it&#39;s impossible to determine if an element should be just changed, or replaced completely.</p><p>Because of this limitation, Morph has a &quot;key&quot; system that allows developers to &quot;force&quot; preserving certain elements rather than replacing them.</p><p>The most common use-case for them is a list of siblings within a loop. Below is an example of why keys are necessary sometimes:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- &quot;Live&quot; Dom on the page: --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Mark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Travis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- New HTML to &quot;morph to&quot;: --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Travis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Mark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Given the above situation, Morph has no way to know that the &quot;Travis&quot; node has been moved in the DOM tree. It just thinks that &quot;Mark&quot; has been changed to &quot;Travis&quot; and &quot;Travis&quot; changed to &quot;Tom&quot;.</p><p>This is not what we actually want, we want Morph to preserve the original elements and instead of changing them, MOVE them within the <code>&lt;ul&gt;</code>.</p><p>By adding keys to each node, we can accomplish this like so:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- &quot;Live&quot; Dom on the page: --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Mark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Travis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- New HTML to &quot;morph to&quot;: --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Travis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Mark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that there are &quot;keys&quot; on the <code>&lt;li&gt;</code>s, Morph will match them in both trees and move them accordingly.</p><p>You can configure what Morph considers a &quot;key&quot; with the <code>key:</code> configuration option. <a href="#lifecycle-hooks">More on that here</a></p>`,43);function f(y,w){const a=l("ExternalLinkIcon");return i(),o("div",null,[u,d,n("p",null,[r,n("a",v,[m,t(a)]),h,n("a",k,[g,t(a)]),b]),q])}var _=e(c,[["render",f],["__file","morph.html.vue"]]);export{_ as default};
