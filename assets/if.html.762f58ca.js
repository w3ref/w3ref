import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o as t,c as o,g as i}from"./app.674943b1.js";const n={},a=i(`<h1 id="x-if" tabindex="-1"><a class="header-anchor" href="#x-if" aria-hidden="true">#</a> x-if</h1><p><code>x-if</code> is used for toggling elements on the page, similarly to <code>x-show</code>, however it completely adds and removes the element it&#39;s applied to rather than just changing its CSS display property to &quot;none&quot;.</p><p>Because of this difference in behavior, <code>x-if</code> should not be applied directly to the element, but instead to a <code>&lt;template&gt;</code> tag that encloses the element. This way, Alpine can keep a record of the element once it&#39;s removed from the page.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;template x-if=&quot;open&quot;&gt;
    &lt;div&gt;Contents...&lt;/div&gt;
&lt;/template&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Unlike <code>x-show</code>, <code>x-if</code>, does NOT support transitioning toggles with <code>x-transition</code>.</p></blockquote><blockquote><p>Remember: <code>&lt;template&gt;</code> tags can only contain one root level element.</p></blockquote>`,6),l=[a];function d(c,s){return t(),o("div",null,l)}var m=e(n,[["render",d],["__file","if.html.vue"]]);export{m as default};
