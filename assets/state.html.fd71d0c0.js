import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c as n,g as t}from"./app.674943b1.js";const s={},i=t(`<h1 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h1><p>State (JavaScript data that Alpine watches for changes) is at the core of everything you do in Alpine. You can provide local data to a chunk of HTML, or make it globally available for use anywhere on a page using <code>x-data</code> or <code>Alpine.store()</code> respectively.</p><p><a name="local-state-x-data"></a></p><h2 id="local-state" tabindex="-1"><a class="header-anchor" href="#local-state" aria-hidden="true">#</a> Local state</h2><p>Alpine allows you to declare an HTML block&#39;s state in a single <code>x-data</code> attribute without ever leaving your markup.</p><p>Here&#39;s a basic example:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ open: false }&quot;&gt;
    ...
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now any other Alpine syntax on or within this element will be able to access <code>open</code>. And like you&#39;d guess, when <code>open</code> changes for any reason, everything that depends on it will react automatically.</p><p><a href="./directives/data">\u2192 Read more about <code>x-data</code></a></p><p><a name="nesting-data"></a></p><h3 id="nesting-data" tabindex="-1"><a class="header-anchor" href="#nesting-data" aria-hidden="true">#</a> Nesting data</h3><p>Data is nestable in Alpine. For example, if you have two elements with Alpine data attached (one inside the other), you can access the parent&#39;s data from inside the child element.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ open: false }&quot;&gt;
    &lt;div x-data=&quot;{ label: &#39;Content:&#39; }&quot;&gt;
        &lt;span x-text=&quot;label&quot;&gt;&lt;/span&gt;
        &lt;span x-show=&quot;open&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is similar to scoping in JavaScript itself (code within a function can access variables declared outside that function.)</p><p>Like you may have guessed, if the child has a data property matching the name of a parent&#39;s property, the child property will take precedence.</p><p><a name="single-element-data"></a></p><h3 id="single-element-data" tabindex="-1"><a class="header-anchor" href="#single-element-data" aria-hidden="true">#</a> Single-element data</h3><p>Although this may seem obvious to some, it&#39;s worth mentioning that Alpine data can be used within the same element. For example:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;button x-data=&quot;{ label: &#39;Click Here&#39; }&quot; x-text=&quot;label&quot;&gt;&lt;/button&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="data-less-alpine"></a></p><h3 id="data-less-alpine" tabindex="-1"><a class="header-anchor" href="#data-less-alpine" aria-hidden="true">#</a> Data-less Alpine</h3><p>Sometimes you may want to use Alpine functionality, but don&#39;t need any reactive data. In these cases, you can opt out of passing an expression to <code>x-data</code> entirely. For example:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;button x-data @click=&quot;alert(&#39;I\\&#39;ve been clicked!&#39;)&quot;&gt;Click Me&lt;/button&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="re-usable-data"></a></p><h3 id="re-usable-data" tabindex="-1"><a class="header-anchor" href="#re-usable-data" aria-hidden="true">#</a> Re-usable data</h3><p>When using Alpine, you may find the need to re-use a chunk of data and/or its corresponding template.</p><p>If you are using a backend framework like Rails or Laravel, Alpine first recommends that you extract the entire block of HTML into a template partial or include.</p><p>If for some reason that isn&#39;t ideal for you or you&#39;re not in a back-end templating environment, Alpine allows you to globally register and re-use the data portion of a component using <code>Alpine.data(...)</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>open <span class="token operator">=</span> <span class="token operator">!</span> <span class="token keyword">this</span><span class="token punctuation">.</span>open
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that you&#39;ve registered the &quot;dropdown&quot; data, you can use it inside your markup in as many places as you like:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;dropdown&quot;&gt;
    &lt;button @click=&quot;toggle&quot;&gt;Expand&lt;/button&gt;

    &lt;span x-show=&quot;open&quot;&gt;Content...&lt;/span&gt;
&lt;/div&gt;

&lt;div x-data=&quot;dropdown&quot;&gt;
    &lt;button @click=&quot;toggle&quot;&gt;Expand&lt;/button&gt;

    &lt;span x-show=&quot;open&quot;&gt;Some Other Content...&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="./globals/alpine-data">\u2192 Read more about using <code>Alpine.data()</code></a></p><p><a name="global-state"></a></p><h2 id="global-state" tabindex="-1"><a class="header-anchor" href="#global-state" aria-hidden="true">#</a> Global state</h2><p>If you wish to make some data available to every component on the page, you can do so using Alpine&#39;s &quot;global store&quot; feature.</p><p>You can register a store using <code>Alpine.store(...)</code>, and reference one with the magic <code>$store()</code> method.</p><p>Let&#39;s look at a simple example. First we&#39;ll register the store globally:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token string">&#39;tabs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span>

    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;second&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;third&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can access or modify its data from anywhere on our page:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data&gt;
    &lt;template x-for=&quot;tab in $store.tabs.items&quot;&gt;
        ...
    &lt;/template&gt;
&lt;/div&gt;

&lt;div x-data&gt;
    &lt;button @click=&quot;$store.tabs.current = &#39;first&#39;&quot;&gt;First Tab&lt;/button&gt;
    &lt;button @click=&quot;$store.tabs.current = &#39;second&#39;&quot;&gt;Second Tab&lt;/button&gt;
    &lt;button @click=&quot;$store.tabs.current = &#39;third&#39;&quot;&gt;Third Tab&lt;/button&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="./globals/alpine-store">\u2192 Read more about <code>Alpine.store()</code></a></p>`,41),l=[i];function o(d,p){return e(),n("div",null,l)}var u=a(s,[["render",o],["__file","state.html.vue"]]);export{u as default};
