import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c as a,g as i}from"./app.674943b1.js";const t={},s=i(`<h1 id="x-init" tabindex="-1"><a class="header-anchor" href="#x-init" aria-hidden="true">#</a> x-init</h1><p>The <code>x-init</code> directive allows you to hook into the initialization phase of any element in Alpine.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-init=&quot;console.log(&#39;I\\&#39;m being initialized!&#39;)&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In the above example, &quot;I&#39;m being initialized!&quot; will be output in the console before it makes further DOM updates.</p><p>Consider another example where <code>x-init</code> is used to fetch some JSON and store it in <code>x-data</code> before the component is processed.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div
    x-data=&quot;{ posts: [] }&quot;
    x-init=&quot;posts = await (await fetch(&#39;/posts&#39;)).json()&quot;
&gt;...&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="next-tick"></a></p><h2 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> $nextTick</h2><p>Sometimes, you want to wait until after Alpine has completely finished rendering to execute some code.</p><p>This would be something like <code>useEffect(..., [])</code> in react, or <code>mount</code> in Vue.</p><p>By using Alpine&#39;s internal <code>$nextTick</code> magic, you can make this happen.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-init=&quot;$nextTick(() =&gt; { ... })&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="standalone-x-init"></a></p><h2 id="standalone-x-init" tabindex="-1"><a class="header-anchor" href="#standalone-x-init" aria-hidden="true">#</a> Standalone <code>x-init</code></h2><p>You can add <code>x-init</code> to any elements inside or outside an <code>x-data</code> HTML block. For example:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data&gt;
    &lt;span x-init=&quot;console.log(&#39;I can initialize&#39;)&quot;&gt;&lt;/span&gt;
&lt;/div&gt;

&lt;span x-init=&quot;console.log(&#39;I can initialize too&#39;)&quot;&gt;&lt;/span&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="auto-evaluate-init-method"></a></p><h2 id="auto-evaluate-init-method" tabindex="-1"><a class="header-anchor" href="#auto-evaluate-init-method" aria-hidden="true">#</a> Auto-evaluate init() method</h2><p>If the <code>x-data</code> object of a component contains an <code>init()</code> method, it will be called automatically. For example:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{
    init() {
        console.log(&#39;I am called automatically&#39;)
    }
}&quot;&gt;
    ...
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is also the case for components that were registered using the <code>Alpine.data()</code> syntax.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I will get evaluated when initializing each &quot;dropdown&quot; component.&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[s];function l(d,c){return e(),a("div",null,o)}var r=n(t,[["render",l],["__file","init.html.vue"]]);export{r as default};
