import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o as t,c as o,g as n}from"./app.674943b1.js";const i={},l=n(`<h1 id="x-effect" tabindex="-1"><a class="header-anchor" href="#x-effect" aria-hidden="true">#</a> x-effect</h1><p><code>x-effect</code> is a useful directive for re-evaluating an expression when one of its dependencies change. You can think of it as a watcher where you don&#39;t have to specify what property to watch, it will watch all properties used within it.</p><p>If this definition is confusing for you, that&#39;s ok. It&#39;s better explained through an example:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ label: &#39;Hello&#39; }&quot; x-effect=&quot;console.log(label)&quot;&gt;
    &lt;button @click=&quot;label += &#39; World!&#39;&quot;&gt;Change Message&lt;/button&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When this component is loaded, the <code>x-effect</code> expression will be run and &quot;Hello&quot; will be logged into the console.</p><p>Because Alpine knows about any property references contained within <code>x-effect</code>, when the button is clicked and <code>label</code> is changed, the effect will be re-triggered and &quot;Hello World!&quot; will be logged to the console.</p>`,6),a=[l];function c(d,s){return t(),o("div",null,a)}var u=e(i,[["render",c],["__file","effect.html.vue"]]);export{u as default};
