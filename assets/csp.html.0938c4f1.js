import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c as a,g as t}from"./app.674943b1.js";const s={},i=t(`<h1 id="csp-content-security-policy" tabindex="-1"><a class="header-anchor" href="#csp-content-security-policy" aria-hidden="true">#</a> CSP (Content-Security Policy)</h1><p>In order for Alpine to be able to execute plain strings from HTML attributes as JavaScript expressions, for example <code>x-on:click=&quot;console.log()&quot;</code>, it needs to rely on utilities that violate the &quot;unsafe-eval&quot; content security policy.</p><blockquote><p>Under the hood, Alpine doesn&#39;t actually use eval() itself because it&#39;s slow and problematic. Instead it uses Function declarations, which are much better, but still violate &quot;unsafe-eval&quot;.</p></blockquote><p>In order to accommodate environments where this CSP is necessary, Alpine offers an alternate build that doesn&#39;t violate &quot;unsafe-eval&quot;, but has a more restrictive syntax.</p><p><a name="installation"></a></p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Like all Alpine extensions, you can include this either via <code>&lt;script&gt;</code> tag or module import:</p><p><a name="script-tag"></a></p><h3 id="script-tag" tabindex="-1"><a class="header-anchor" href="#script-tag" aria-hidden="true">#</a> Script tag</h3><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;html&gt;
    &lt;script src=&quot;alpinejs/alpinejs-csp/cdn.js&quot; defer&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="module-import"></a></p><h3 id="module-import" tabindex="-1"><a class="header-anchor" href="#module-import" aria-hidden="true">#</a> Module import</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Alpine <span class="token keyword">from</span> <span class="token string">&#39;@alpinejs/csp&#39;</span>

window<span class="token punctuation">.</span>Alpine <span class="token operator">=</span> Alpine
window<span class="token punctuation">.</span>Alpine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="restrictions"></a></p><h2 id="restrictions" tabindex="-1"><a class="header-anchor" href="#restrictions" aria-hidden="true">#</a> Restrictions</h2><p>Since Alpine can no longer interpret strings as plain JavaScript, it has to parse and construct JavaScript functions from them manually.</p><p>Due to this limitation, you must use <code>Alpine.data</code> to register your <code>x-data</code> objects, and must reference properties and methods from it by key only.</p><p>For example, an inline component like this will not work.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;!-- Bad --&gt;
&lt;div x-data=&quot;{ count: 1 }&quot;&gt;
    &lt;button @click=&quot;count++&quot;&gt;Increment&lt;/button&gt;

    &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, breaking out the expressions into external APIs, the following is valid with the CSP build:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;!-- Good --&gt;
&lt;div x-data=&quot;counter&quot;&gt;
    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;

    &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>

    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[i];function l(c,p){return e(),a("div",null,o)}var d=n(s,[["render",l],["__file","csp.html.vue"]]);export{d as default};
