import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o as a,c as n,g as i}from"./app.674943b1.js";const t={},s=i(`<h1 id="lifecycle" tabindex="-1"><a class="header-anchor" href="#lifecycle" aria-hidden="true">#</a> Lifecycle</h1><p>Alpine has a handful of different techniques for hooking into different parts of its lifecycle. Let&#39;s go through the most useful ones to familiarize yourself with:</p><p><a name="element-initialization"></a></p><h2 id="element-initialization" tabindex="-1"><a class="header-anchor" href="#element-initialization" aria-hidden="true">#</a> Element initialization</h2><p>Another extremely useful lifecycle hook in Alpine is the <code>x-init</code> directive.</p><p><code>x-init</code> can be added to any element on a page and will execute any JavaScript you call inside it when Alpine begins initializing that element.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;button x-init=&quot;console.log(&#39;Im initing&#39;)&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In addition to the directive, Alpine will automatically call any <code>init()</code> methods stored on a data object. For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// I get called before the element using this data initializes.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="after-a-state-change"></a></p><h2 id="after-a-state-change" tabindex="-1"><a class="header-anchor" href="#after-a-state-change" aria-hidden="true">#</a> After a state change</h2><p>Alpine allows you to execute code when a piece of data (state) changes. It offers two different APIs for such a task: <code>$watch</code> and <code>x-effect</code>.</p><p><a name="watch"></a></p><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> <code>$watch</code></h3><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ open: false }&quot; x-init=&quot;$watch(&#39;open&#39;, value =&gt; console.log(value))&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>As you can see above, <code>$watch</code> allows you to hook into data changes using a dot-notation key. When that piece of data changes, Alpine will call the passed callback and pass it the new value. along with the old value before the change.</p><p><a href="./magics/watch">\u2192 Read more about $watch</a></p><p><a name="x-effect"></a></p><h3 id="x-effect" tabindex="-1"><a class="header-anchor" href="#x-effect" aria-hidden="true">#</a> <code>x-effect</code></h3><p><code>x-effect</code> uses the same mechanism under the hood as <code>$watch</code> but has very different usage.</p><p>Instead of specifying which data key you wish to watch, <code>x-effect</code> will call the provided code and intelligently look for any Alpine data used within it. Now when one of those pieces of data changes, the <code>x-effect</code> expression will be re-run.</p><p>Here&#39;s the same bit of code from the <code>$watch</code> example rewritten using <code>x-effect</code>:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ open: false }&quot; x-effect=&quot;console.log(open)&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now, this expression will be called right away, and re-called every time <code>open</code> is updated.</p><p>The two main behavioral differences with this approach are:</p><ol><li>The provided code will be run right away AND when data changes (<code>$watch</code> is &quot;lazy&quot; -- won&#39;t run until the first data change)</li><li>No knowledge of the previous value. (The callback provided to <code>$watch</code> receives both the new value AND the old one)</li></ol><p><a href="./directives/effect">\u2192 Read more about x-effect</a></p><p><a name="alpine-initialization"></a></p><h2 id="alpine-initialization" tabindex="-1"><a class="header-anchor" href="#alpine-initialization" aria-hidden="true">#</a> Alpine initialization</h2><p><a name="alpine-initializing"></a></p><h3 id="alpine-init" tabindex="-1"><a class="header-anchor" href="#alpine-init" aria-hidden="true">#</a> <code>alpine:init</code></h3><p>Ensuring a bit of code executes after Alpine is loaded, but BEFORE it initializes itself on the page is a necessary task.</p><p>This hook allows you to register custom data, directives, magics, etc. before Alpine does its thing on a page.</p><p>You can hook into this point in the lifecycle by listening for an event that Alpine dispatches called: <code>alpine:init</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;alpine:init&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="alpine-initialized"></a></p><h3 id="alpine-initialized" tabindex="-1"><a class="header-anchor" href="#alpine-initialized" aria-hidden="true">#</a> <code>alpine:initialized</code></h3><p>Alpine also offers a hook that you can use to execute code After it&#39;s done initializing called <code>alpine:initialized</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;alpine:initialized&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),o=[s];function c(l,p){return a(),n("div",null,o)}var u=e(t,[["render",c],["__file","lifecycle.html.vue"]]);export{u as default};
