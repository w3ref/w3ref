import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,o as s,c as o,a as e,d as l,b as n,g as r}from"./app.674943b1.js";const d={},c=e("h1",{id:"intersect-plugin",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#intersect-plugin","aria-hidden":"true"},"#"),n(" Intersect Plugin")],-1),u=n("Alpine's Intersect plugin is a convenience wrapper for "),h={href:"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API",target:"_blank",rel:"noopener noreferrer"},p=n("Intersection Observer"),v=n(" that allows you to easily react when an element enters the viewport."),m=r(`<p>This is useful for: lazy loading images and other content, triggering animations, infinite scrolling, logging &quot;views&quot; of content, etc.</p><p><a name="installation"></a></p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>You can use this plugin by either including it from a <code>&lt;script&gt;</code> tag or installing it via NPM:</p><h3 id="via-cdn" tabindex="-1"><a class="header-anchor" href="#via-cdn" aria-hidden="true">#</a> Via CDN</h3><p>You can include the CDN build of this plugin as a <code>&lt;script&gt;</code> tag, just make sure to include it BEFORE Alpine&#39;s core JS file.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;!-- Alpine Plugins --&gt;
&lt;script defer src=&quot;https://unpkg.com/@alpinejs/intersect@3.x.x/dist/cdn.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- Alpine Core --&gt;
&lt;script defer src=&quot;https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-npm" tabindex="-1"><a class="header-anchor" href="#via-npm" aria-hidden="true">#</a> Via NPM</h3><p>You can install Intersect from NPM for use inside your bundle like so:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @alpinejs/intersect
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then initialize it from your bundle:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Alpine <span class="token keyword">from</span> <span class="token string">&#39;alpinejs&#39;</span>
<span class="token keyword">import</span> intersect <span class="token keyword">from</span> <span class="token string">&#39;@alpinejs/intersect&#39;</span>

Alpine<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>intersect<span class="token punctuation">)</span>

<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="x-intersect"></a></p><h2 id="x-intersect" tabindex="-1"><a class="header-anchor" href="#x-intersect" aria-hidden="true">#</a> x-intersect</h2><p>The primary API for using this plugin is <code>x-intersect</code>. You can add <code>x-intersect</code> to any element within an Alpine component, and when that component enters the viewport (is scrolled into view), the provided expression will execute.</p><p>For example, in the following snippet, <code>shown</code> will remain <code>false</code> until the element is scrolled into view. At that point, the expression will execute and <code>shown</code> will become <code>true</code>:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ shown: false }&quot; x-intersect=&quot;shown = true&quot;&gt;
    &lt;div x-show=&quot;shown&quot; x-transition&gt;
        I&#39;m in the viewport!
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div class=&quot;demo&quot; style=&quot;height: 60px; overflow-y: scroll;&quot; x-data x-ref=&quot;root&quot;&gt;
    &lt;a href=&quot;#&quot; @click.prevent=&quot;$refs.root.scrollTo({ top: $refs.root.scrollHeight, behavior: &#39;smooth&#39; })&quot;&gt;Scroll Down \u{1F447}&lt;/a&gt;
    &lt;div style=&quot;height: 50vh&quot;&gt;&lt;/div&gt;
    &lt;div x-data=&quot;{ shown: false }&quot; x-intersect=&quot;shown = true&quot; id=&quot;yoyo&quot;&gt;
        &lt;div x-show=&quot;shown&quot; x-transition.duration.1000ms&gt;
            I&#39;m in the viewport!
        &lt;/div&gt;
        &lt;div x-show=&quot;! shown&quot;&gt;&amp;nbsp;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="x-intersect-enter"></a></p><h3 id="x-intersect-enter" tabindex="-1"><a class="header-anchor" href="#x-intersect-enter" aria-hidden="true">#</a> x-intersect:enter</h3><p>The <code>:enter</code> suffix is an alias of <code>x-intersect</code>, and works the same way:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect:enter=&quot;shown = true&quot;&gt;...&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may choose to use this for clarity when also using the <code>:leave</code> suffix.</p><p><a name="x-intersect-leave"></a></p><h3 id="x-intersect-leave" tabindex="-1"><a class="header-anchor" href="#x-intersect-leave" aria-hidden="true">#</a> x-intersect:leave</h3><p>Appending <code>:leave</code> runs your expression when the element leaves the viewport:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect:leave=&quot;shown = true&quot;&gt;...&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="modifiers"></a></p><h2 id="modifiers" tabindex="-1"><a class="header-anchor" href="#modifiers" aria-hidden="true">#</a> Modifiers</h2><p><a name="once"></a></p><h3 id="once" tabindex="-1"><a class="header-anchor" href="#once" aria-hidden="true">#</a> .once</h3><p>Sometimes it&#39;s useful to evaluate an expression only the first time an element enters the viewport and not subsequent times. For example when triggering &quot;enter&quot; animations. In these cases, you can add the <code>.once</code> modifier to <code>x-intersect</code> to achieve this.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect.once=&quot;shown = true&quot;&gt;...&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="half"></a></p><h3 id="half" tabindex="-1"><a class="header-anchor" href="#half" aria-hidden="true">#</a> .half</h3><p>Evaluates the expression once the intersection threshold exceeds <code>0.5</code>.</p><p>Useful for elements where it&#39;s important to show at least part of the element.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect.half=&quot;shown = true&quot;&gt;...&lt;/div&gt; // when \`0.5\` of the element is in the viewport
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="full"></a></p><h3 id="full" tabindex="-1"><a class="header-anchor" href="#full" aria-hidden="true">#</a> .full</h3><p>Evaluates the expression once the intersection threshold exceeds <code>0.99</code>.</p><p>Useful for elements where it&#39;s important to show the whole element.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect.full=&quot;shown = true&quot;&gt;...&lt;/div&gt; // when \`0.99\` of the element is in the viewport
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="threshold"></a></p><h3 id="threshold" tabindex="-1"><a class="header-anchor" href="#threshold" aria-hidden="true">#</a> .threshold</h3><p>Allows you to control the <code>threshold</code> property of the underlying <code>IntersectionObserver</code>:</p><p>This value should be in the range of &quot;0-100&quot;. A value of &quot;0&quot; means: trigger an &quot;intersection&quot; if ANY part of the element enters the viewport (the default behavior). While a value of &quot;100&quot; means: don&#39;t trigger an &quot;intersection&quot; unless the entire element has entered the viewport.</p><p>Any value in between is a percentage of those two extremes.</p><p>For example if you want to trigger an intersection after half of the element has entered the page, you can use <code>.threshold.50</code>:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect.threshold.50=&quot;shown = true&quot;&gt;...&lt;/div&gt; // when 50% of the element is in the viewport
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you wanted to trigger only when 5% of the element has entered the viewport, you could use: <code>.threshold.05</code>, and so on and so forth.</p><p><a name="margin"></a></p><h3 id="margin" tabindex="-1"><a class="header-anchor" href="#margin" aria-hidden="true">#</a> .margin</h3><p>Allows you to control the <code>rootMargin</code> property of the underlying <code>IntersectionObserver</code>. This effectively tweaks the size of the viewport boundary. Positive values expand the boundary beyond the viewport, and negative values shrink it inward. The values work like CSS margin: one value for all sides, two values for top/bottom, left/right, or four values for top, right, bottom, left. You can use <code>px</code> and <code>%</code> values, or use a bare number to get a pixel value.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect.margin.200px=&quot;loaded = true&quot;&gt;...&lt;/div&gt; // Load when the element is within 200px of the viewport
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect:leave.margin.10%.25px.25.25px=&quot;loaded = false&quot;&gt;...&lt;/div&gt; // Unload when the element gets within 10% of the top of the viewport, or within 25px of the other three edges
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-intersect.margin.-100px=&quot;visible = true&quot;&gt;...&lt;/div&gt; // Mark as visible when element is more than 100 pixels into the viewport.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,57);function g(f,b){const t=a("ExternalLinkIcon");return s(),o("div",null,[c,e("p",null,[u,e("a",h,[p,l(t)]),v]),m])}var q=i(d,[["render",g],["__file","intersect.html.vue"]]);export{q as default};
