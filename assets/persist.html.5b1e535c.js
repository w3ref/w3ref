import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{r as i,o,c as l,a as n,d as r,g as s,b as e}from"./app.674943b1.js";var c="/images/refs/web/frameworks/js/alpinejs/plugins/persist/persist_devtools.png",d="/images/refs/web/frameworks/js/alpinejs/plugins/persist/persist_custom_key_devtools.png";const u={},p=s(`<h1 id="persist-plugin" tabindex="-1"><a class="header-anchor" href="#persist-plugin" aria-hidden="true">#</a> Persist Plugin</h1><p>Alpine&#39;s Persist plugin allows you to persist Alpine state across page loads.</p><p>This is useful for persisting search filters, active tabs, and other features where users will be frustrated if their configuration is reset after refreshing or leaving and revisiting a page.</p><p><a name="installation"></a></p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>You can use this plugin by either including it from a <code>&lt;script&gt;</code> tag or installing it via NPM:</p><h3 id="via-cdn" tabindex="-1"><a class="header-anchor" href="#via-cdn" aria-hidden="true">#</a> Via CDN</h3><p>You can include the CDN build of this plugin as a <code>&lt;script&gt;</code> tag, just make sure to include it BEFORE Alpine&#39;s core JS file.</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;!-- Alpine Plugins --&gt;
&lt;script defer src=&quot;https://unpkg.com/@alpinejs/persist@3.x.x/dist/cdn.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- Alpine Core --&gt;
&lt;script defer src=&quot;https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-npm" tabindex="-1"><a class="header-anchor" href="#via-npm" aria-hidden="true">#</a> Via NPM</h3><p>You can install Persist from NPM for use inside your bundle like so:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @alpinejs/persist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then initialize it from your bundle:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Alpine <span class="token keyword">from</span> <span class="token string">&#39;alpinejs&#39;</span>
<span class="token keyword">import</span> persist <span class="token keyword">from</span> <span class="token string">&#39;@alpinejs/persist&#39;</span>

Alpine<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>persist<span class="token punctuation">)</span>

<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="magic-persist"></a></p><h2 id="persist" tabindex="-1"><a class="header-anchor" href="#persist" aria-hidden="true">#</a> $persist</h2><p>The primary API for using this plugin is the magic <code>$persist</code> method.</p><p>You can wrap any value inside <code>x-data</code> with <code>$persist</code> like below to persist its value across page loads:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ count: $persist(0) }&quot;&gt;
    &lt;button x-on:click=&quot;count++&quot;&gt;Increment&lt;/button&gt;

    &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div class=&quot;demo&quot;&gt;
    &lt;div x-data=&quot;{ count: $persist(0) }&quot;&gt;
        &lt;button x-on:click=&quot;count++&quot;&gt;Increment&lt;/button&gt;
        &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, because we wrapped <code>0</code> in <code>$persist()</code>, Alpine will now intercept changes made to <code>count</code> and persist them across page loads.</p><p>You can try this for yourself by incrementing the &quot;count&quot; in the above example, then refreshing this page and observing that the &quot;count&quot; maintains its state and isn&#39;t reset to &quot;0&quot;.</p><p><a name="how-it-works"></a></p><h2 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work?</h2>`,24),v=e("If a value is wrapped in "),g=n("code",null,"$persist",-1),m=e(", on initialization Alpine will register its own watcher for that value. Now everytime that value changes for any reason, Alpine will store the new value in "),h={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",target:"_blank",rel:"noopener noreferrer"},b=e("localStorage"),k=e("."),f=s('<p>Now when a page is reloaded, Alpine will check localStorage (using the name of the property as the key) for a value. If it finds one, it will set the property value from localStorage immediately.</p><p>You can observe this behavior by opening your browser devtool&#39;s localStorage viewer:</p><p><a href="https://developer.chrome.com/docs/devtools/storage/localstorage/"><img src="'+c+`" alt="Chrome devtools showing the localStorage view with count set to 0"></a></p><p>You&#39;ll observe that by simply visiting this page, Alpine already set the value of &quot;count&quot; in localStorage. You&#39;ll also notice it prefixes the property name &quot;count&quot; with &quot;<em>x</em>&quot; as a way of namespacing these values so Alpine doesn&#39;t conflict with other tools using localStorage.</p><p>Now change the &quot;count&quot; in the following example and observe the changes made by Alpine to localStorage:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ count: $persist(0) }&quot;&gt;
    &lt;button x-on:click=&quot;count++&quot;&gt;Increment&lt;/button&gt;

    &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-alpinejs ext-alpinejs line-numbers-mode"><pre class="language-alpinejs"><code>&lt;div class=&quot;demo&quot;&gt;
    &lt;div x-data=&quot;{ count: $persist(0) }&quot;&gt;
        &lt;button x-on:click=&quot;count++&quot;&gt;Increment&lt;/button&gt;
        &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>$persist</code> works with primitive values as well as with arrays and objects. However, it is worth noting that localStorage must be cleared when the type of the variable changes.<br> Given the previous example, if we change count to a value of <code>$persist({ value: 0 })</code>, then localStorage must be cleared or the variable &#39;count&#39; renamed.</p></blockquote><p><a name="custom-key"></a></p><h2 id="setting-a-custom-key" tabindex="-1"><a class="header-anchor" href="#setting-a-custom-key" aria-hidden="true">#</a> Setting a custom key</h2><p>By default, Alpine uses the property key that <code>$persist(...)</code> is being assigned to (&quot;count&quot; in the above examples).</p><p>Consider the scenario where you have multiple Alpine components across pages or even on the same page that all use &quot;count&quot; as the property key.</p><p>Alpine will have no way of differentiating between these components.</p><p>In these cases, you can set your own custom key for any persisted value using the <code>.as</code> modifier like so:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ count: $persist(0).as(&#39;other-count&#39;) }&quot;&gt;
    &lt;button x-on:click=&quot;count++&quot;&gt;Increment&lt;/button&gt;

    &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now Alpine will store and retrieve the above &quot;count&quot; value using the key &quot;other-count&quot;.</p><p>Here&#39;s a view of Chrome Devtools to see for yourself:</p><img src="`+d+`" alt="Chrome devtools showing the localStorage view with count set to 0"><p><a name="custom-storage"></a></p><h2 id="using-a-custom-storage" tabindex="-1"><a class="header-anchor" href="#using-a-custom-storage" aria-hidden="true">#</a> Using a custom storage</h2><p>By default, data is saved to localStorage, it does not have an expiration time and it&#39;s kept even when the page is closed.</p><p>Consider the scenario where you want to clear the data once the user close the tab. In this case you can persist data to sessionStorage using the <code>.using</code> modifier like so:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;div x-data=&quot;{ count: $persist(0).using(sessionStorage) }&quot;&gt;
    &lt;button x-on:click=&quot;count++&quot;&gt;Increment&lt;/button&gt;

    &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also define your custom storage object exposing a getItem function and a setItem function. For example, you can decide to use a session cookie as storage doing so:</p><div class="language-alpine ext-alpine line-numbers-mode"><pre class="language-alpine"><code>&lt;script&gt;
    window.cookieStorage = {
        getItem(key) {
            let cookies = document.cookie.split(&quot;;&quot;);
            for (let i = 0; i &lt; cookies.length; i++) {
                let cookie = cookies[i].split(&quot;=&quot;);
                if (key == cookie[0].trim()) {
                    return decodeURIComponent(cookie[1]);
                }
            }
            return null;
        },
        setItem(key, value) {
            document.cookie = key+&#39; = &#39;+encodeURIComponent(value)
        }
    }
&lt;/script&gt;

&lt;div x-data=&quot;{ count: $persist(0).using(cookieStorage) }&quot;&gt;
    &lt;button x-on:click=&quot;count++&quot;&gt;Increment&lt;/button&gt;

    &lt;span x-text=&quot;count&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="using-persist-with-alpine-data"></a></p><h2 id="using-persist-with-alpine-data" tabindex="-1"><a class="header-anchor" href="#using-persist-with-alpine-data" aria-hidden="true">#</a> Using $persist with Alpine.data</h2><p>If you want to use <code>$persist</code> with <code>Alpine.data</code>, you need to use a standard function instead of an arrow function so Alpine can bind a custom <code>this</code> context when it initially evaluates the component scope.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$persist</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="using-alpine-persist-global"></a></p><h2 id="using-the-alpine-persist-global" tabindex="-1"><a class="header-anchor" href="#using-the-alpine-persist-global" aria-hidden="true">#</a> Using the Alpine.$persist global</h2><p><code>Alpine.$persist</code> is exposed globally so it can be used outside of <code>x-data</code> contexts. This is useful to persist data from other sources such as <code>Alpine.store</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Alpine<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token string">&#39;darkMode&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">on</span><span class="token operator">:</span> Alpine<span class="token punctuation">.</span><span class="token function">$persist</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;darkMode_on&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function w(q,x){const t=i("ExternalLinkIcon");return o(),l("div",null,[p,n("p",null,[v,g,m,n("a",h,[b,r(t)]),k]),f])}var j=a(u,[["render",w],["__file","persist.html.vue"]]);export{j as default};
